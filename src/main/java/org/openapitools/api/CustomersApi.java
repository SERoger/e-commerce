/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.models.Customer;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.openapitools.service.CustomerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;


@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-22T16:29:22.836383600-05:00[America/New_York]", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "customers", description = "the customers API")
public interface CustomersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }


    /**
     * GET /customers : List all customers
     *
     * @return A list of customers (status code 200)
     */
    @Operation(
        operationId = "customersGet",
        summary = "List all customers",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of customers", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Customer.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/customers",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Customer>> customersGet() ;


    /**
     * DELETE /customers/{id} : Delete a Customer
     *
     * @param id  (required)
     * @return Customer deleted (status code 204)
     */
    @Operation(
        operationId = "customersIdDelete",
        summary = "Delete a Customer",
        responses = {
            @ApiResponse(responseCode = "204", description = "Customer deleted")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/customers/{id}"
    )
    
    default ResponseEntity<Void> customersIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /customers/{id} : Get a customer by ID
     *
     * @param id  (required)
     * @return A customer (status code 200)
     */
    @Operation(
        operationId = "customersIdGet",
        summary = "Get a customer by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "A customer", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/customers/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Customer> customersIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * PUT /customers/{id} : Update a Customer
     *
     * @param id  (required)
     * @param customer  (required)
     * @return Customer updated (status code 200)
     */
    @Operation(
        operationId = "customersIdPut",
        summary = "Update a Customer",
        responses = {
            @ApiResponse(responseCode = "200", description = "Customer updated")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/customers/{id}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> customersIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "Customer", description = "", required = true) @Valid @RequestBody Customer customer
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /customers : Create a new Customer
     *
     * @param customer  (required)
     * @return Customer created (status code 201)
     */
    @Operation(
        operationId = "customersPost",
        summary = "Create a new Customer",
        responses = {
            @ApiResponse(responseCode = "201", description = "Customer created")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/customers",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> customersPost(
        @Parameter(name = "Customer", description = "", required = true) @Valid @RequestBody Customer customer
    );

}
