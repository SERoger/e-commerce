/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.models.Product;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-22T14:52:36.334800500-05:00[America/New_York]", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "products", description = "the products API")
public interface ProductsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /products : List all products
     *
     * @return A list of products (status code 200)
     */
    @Operation(
        operationId = "productsGet",
        summary = "List all products",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of products", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Product.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Product>> productsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }, { \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /products/{id} : Delete a product
     *
     * @param id  (required)
     * @return Product deleted (status code 204)
     */
    @Operation(
        operationId = "productsIdDelete",
        summary = "Delete a product",
        responses = {
            @ApiResponse(responseCode = "204", description = "Product deleted")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/products/{id}"
    )
    
    default ResponseEntity<Void> productsIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /products/{id} : Get a product by ID
     *
     * @param id  (required)
     * @return A product (status code 200)
     */
    @Operation(
        operationId = "productsIdGet",
        summary = "Get a product by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "A product", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Product> productsIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"price\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /products/{id} : Update a product
     *
     * @param id  (required)
     * @param product  (required)
     * @return Product updated (status code 200)
     */
    @Operation(
        operationId = "productsIdPut",
        summary = "Update a product",
        responses = {
            @ApiResponse(responseCode = "200", description = "Product updated")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/products/{id}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> productsIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "Product", description = "", required = true) @Valid @RequestBody Product product
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /products : Create a new product
     *
     * @param product  (required)
     * @return Product created (status code 201)
     */
    @Operation(
        operationId = "productsPost",
        summary = "Create a new product",
        responses = {
            @ApiResponse(responseCode = "201", description = "Product created")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/products",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> productsPost(
        @Parameter(name = "Product", description = "", required = true) @Valid @RequestBody Product product
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
